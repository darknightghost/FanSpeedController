cmake_minimum_required(VERSION 3.0.0 FATAL_ERROR)

set (CMAKE_CXX_STANDARD 17) 

cmake_policy(SET CMP0054 NEW)

# Project
project (FanSpeedController C CXX)

# Build type
if (NOT CMAKE_BUILD_TYPE)
    set (CMAKE_BUILD_TYPE "Debug")

endif ()

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_definitions ("-DDEBUG")

endif ()

set (CMAKE_BUILD_TYPE "${CMAKE_BUILD_TYPE}"  CACHE STRING "${CMAKE_BUILD_TYPE}" FORCE)

if (GENERATOR_IS_MULTI_CONFIG OR CMAKE_CONFIGURATION_TYPES)
    set (CMAKE_CONFIGURATION_TYPES "${CMAKE_BUILD_TYPE}" CACHE STRING "${CMAKE_BUILD_TYPE}" FORCE)

endif()

message (STATUS "Build Type - ${CMAKE_BUILD_TYPE}.")
message (STATUS "Host System - ${CMAKE_HOST_SYSTEM_NAME}.")
message (STATUS "Host Processor - ${CMAKE_HOST_SYSTEM_PROCESSOR}.")
message (STATUS "Target System - ${CMAKE_SYSTEM_NAME}.")
message (STATUS "Target Processor - ${CMAKE_SYSTEM_PROCESSOR}.")

# Environment.
include_directories (
    "${CMAKE_CURRENT_SOURCE_DIR}/include"
    "${CMAKE_CURRENT_SOURCE_DIR}/../include")
add_definitions ("-DQIODEVICE_BUFFERSIZE=Q_INT64_C(64 * 1024 * 1024)")

if (WIN32)
    include_directories ("${CMAKE_CURRENT_SOURCE_DIR}/3rd-party/windows")
    add_definitions ("-DOS_WINDOWS=1")

elseif (UNIX)
    add_definitions ("-DOS_LINUX=1")

endif ()

# Platform options.
# Debug/Release.
# Enable address sanitizer in debug mode if possible.
if (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    if (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang"
            OR ${CMAKE_CXX_COMPILER_ID} STREQUAL "AppleClang"
            OR ${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
        # Enable address sanitizer.
        add_compile_options (-fno-omit-frame-pointer -fsanitize=address)
        add_link_options (-fno-omit-frame-pointer -fsanitize=address)
        message (STATUS "Address sanitizer is enabled.")

    endif()

endif ()

if (${CMAKE_BUILD_TYPE} STREQUAL "Release")
    add_definitions ("-DQT_NO_DEBUG=1")

endif ()

# Compiler.
if (MSVC)
    # Set compile options.
    if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "AMD64")
        set (CMAKE_C_FLAGS_DEBUG "/DAMD64 /DDEBUG /RTC1 /Od ${C_CXX_FLAGS}")
        set (CMAKE_C_FLAGS_RELEASE "/DAMD64 /DNDEBUG /O2 ${C_CXX_FLAGS}")

    elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86")
        set (CMAKE_C_FLAGS_DEBUG "/DDEBUG /RTC1 /Od ${C_CXX_FLAGS} /arch:IA32")
        set (CMAKE_C_FLAGS_RELEASE "/DNDEBUG /O2 ${C_CXX_FLAGS} /arch:IA32")

    else ()
        message (FATAL_ERROR "Unsupported Platform: ${CMAKE_SYSTEM_PROCESSOR}")

    endif ()
    add_compile_options ("/WX")

    # Output directory.
    set (MSVC_CONFIG_TYPE ${CMAKE_BUILD_TYPE})
    string (TOUPPER ${CMAKE_BUILD_TYPE} OUTPUTCONFIG)
    set (CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
    set (CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
    set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")

    # Ignore warnings of functions like strcpy(), strcmp()...
    add_compile_options ("-D_CRT_SECURE_NO_WARNINGS")
    if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
        add_link_options ("/subsystem:console" "/entry:mainCRTStartup")

    elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
        add_link_options ("/subsystem:windows" "/entry:mainCRTStartup")

    endif ()

    if (${CMAKE_BUILD_TYPE} STREQUAL "Release")
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zi")
        set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /DEBUG /OPT:REF /OPT:ICF")

    endif ()
else ()
    add_compile_options ("-Werror")
    if (${CMAKE_BUILD_TYPE} STREQUAL "Release")
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
        set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -g")

    endif ()

endif ()

# Dependencies
find_package (PythonInterp 
    REQUIRED        3)

find_package (Qt5       5.14.1  REQUIRED
    COMPONENTS  Core Widgets Network SerialPort)

# Sources
file (GLOB_RECURSE HEADERS
    "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp"
    )

file (GLOB_RECURSE SRC
    "${CMAKE_CURRENT_SOURCE_DIR}/source/*.c"
    "${CMAKE_CURRENT_SOURCE_DIR}/source/*.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/source/*.cc"
    "${CMAKE_CURRENT_SOURCE_DIR}/source/*.C"
    )

if (WIN32)
    file (GLOB_RECURSE WINDOWS_SRC
        "${CMAKE_CURRENT_SOURCE_DIR}/3rd-party/windows/*.c"
        "${CMAKE_CURRENT_SOURCE_DIR}/3rd-party/windows/*.cpp"
        "${CMAKE_CURRENT_SOURCE_DIR}/3rd-party/windows/*.cc"
        "${CMAKE_CURRENT_SOURCE_DIR}/3rd-party/windows/*.C"
        "${CMAKE_CURRENT_SOURCE_DIR}/resource/*.rc"
        )

    list (APPEND SRC
        ${WINDOWS_SRC}
        )
    
endif ()

# Recources
set (RESOURCE_LIST_FILE     "${CMAKE_CURRENT_SOURCE_DIR}/resource/resources.qrc")
set (GENERATE_RESOURCE_CMD  "${PYTHON_EXECUTABLE}" "${CMAKE_CURRENT_SOURCE_DIR}/generate_resource.py")

file (GLOB_RECURSE RESOURCES
    "${CMAKE_CURRENT_SOURCE_DIR}/resource/*"
    )
list (REMOVE_ITEM RESOURCES     ${RESOURCE_LIST_FILE})

add_custom_command (
    OUTPUT      ${RESOURCE_LIST_FILE}
    COMMAND     ${GENERATE_RESOURCE_CMD} ${RESOURCES} -r "${CMAKE_CURRENT_SOURCE_DIR}/resource" -o "${RESOURCE_LIST_FILE}"
    DEPENDS     ${RESOURCES} "${CMAKE_CURRENT_SOURCE_DIR}/generate_resource.py")

# Qt wrappers
qt5_wrap_cpp (WRAPPED_HEADERS ${HEADERS})
qt5_add_resources (WRAPPED_RESOURCE "${RESOURCE_LIST_FILE}")

add_executable(${PROJECT_NAME}
    ${SRC}
    ${WRAPPED_HEADERS}
    ${WRAPPED_RESOURCE})

target_link_libraries(${PROJECT_NAME}
    Qt5::Core
    Qt5::Widgets
    Qt5::Network
    Qt5::SerialPort
    )

if (WIN32)
    target_link_libraries(${PROJECT_NAME}
        Dbghelp
        shell32
        )

endif ()
